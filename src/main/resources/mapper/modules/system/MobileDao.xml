<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kylin.modules.system.dao.MobileDao">

	<insert id="save" parameterType="com.kylin.modules.system.entity.Mobile">
		insert into MOBILE
		(
			MOBILE_NUM,
   			STATION_NUM,
   			STATION_SYNC,
   			USERS_SYNC,
   			GOODS_SYNC,
   			CATALOG_SYNC
		)
		values
			(
				#{mobileNum},
				#{stationNum},
				0,
				0,
				0,
				0
			)
	</insert>

	<select id="queryObject" resultType="com.kylin.modules.system.entity.Mobile">
		select *,(select d.name from dbo.sys_dept d where d.dept_num = m.STATION_NUM) as stationName from MOBILE m where MOBILE_NUM =  #{mobileNum}
	</select>

	<select id="queryVersionNo" resultType="com.kylin.modules.system.entity.Mobile">
		select m.VERSION_NO,m.DEPT_NUM from dbo.MOBILE_VERSION m
	</select>

	<!-- 查询数据总数 -->
	<select id="queryTotal" resultType="int">
		select count(*) from dbo.MOBILE
	</select>

	<!-- 查询注册码是否重复 -->
	<select id="queryMobileNum" resultType="int">
		select count(*) from dbo.MOBILE WHERE MOBILE_NUM = #{mobileNum}
	</select>

	<!--<查询移动端数据>-->
	<select id="queryList" resultType="com.kylin.modules.system.entity.Mobile">
		select
		<choose>
			<when test="limit != null ">
				top ${limit} A.*, (SELECT t.name from sys_dept t WHERE t.dept_id = A.station_num ) as stationName
				from  (
				SELECT ROW_NUMBER() OVER (ORDER BY MOBILE_NUM) AS RowNumber,* FROM dbo.MOBILE
				)as A
			</when>
			<otherwise>
				* from dbo.MOBILE c
			</otherwise>
		</choose>
		<if test="page != null and limit != null">
			WHERE RowNumber > ${limit}*(${page}-1)
		</if>

		<if test="mobileNum != null and mobileNum.trim() != ''">
			and MOBILE_NUM = #{mobileNum}
		</if>

		<if test="stationNum != null and stationNum.trim() != '' ">
			AND station_num IN (${stationNum})
		</if>

	</select>

	<update id="update" parameterType="com.kylin.modules.system.entity.Mobile">
		update dbo.MOBILE
		<set>
			<if test="stationNum != null">STATION_NUM = #{stationNum}, </if>
			<if test="mobileMac != null">MOBILE_MAC = #{mobileMac}, </if>
			<if test="createTime != null">CREATE_TIME = #{createTime}, </if>
			<if test="stationSync != null">STATION_SYNC = #{stationSync}, </if>
			<if test="usersSync != null">USERS_SYNC = #{usersSync}, </if>
			<if test="goodsSync != null">GOODS_SYNC = #{goodsSync}, </if>
			<if test="catalogSync != null">CATALOG_SYNC = #{catalogSync}, </if>
			<if test="versionNo != null">VERSION_NO = #{versionNo} </if>
		</set>
		where MOBILE_NUM  in (${mobileNum})
	</update>

	<delete id="delete" parameterType="String">
		delete from MOBILE where MOBILE_NUM=#{mobileNum}
	</delete>

	<delete id="deleteBatch"  parameterType="String">
		delete from MOBILE where MOBILE_NUM in
		<foreach item="mobileNum" collection="array" open="(" separator="," close=")">
			#{mobileNum}
		</foreach>
	</delete>

	<select id="createStationTable" parameterType="java.util.HashMap" statementType="CALLABLE">
    <![CDATA[
		{#{result,mode=OUT,jdbcType=INTEGER}= CALL PROC_CREATE_TABLE_PASS_RECORD(#{stationNum,mode=IN,jdbcType=VARCHAR})}
	]]>
	</select>

    <select id="createStationView" statementType="CALLABLE">
	<![CDATA[
		{#{result,mode=OUT,jdbcType=INTEGER}= CALL PROC_CREATE_VIEW_PASS_RECORD()}
	]]>
    </select>
	<update id="createInsertTrigger"> <![CDATA[
		CREATE TRIGGER TRG_I_PASS_RECORD_${stationNum} ON PASS_RECORD_${stationNum} AFTER INSERT AS
		BEGIN
			SET NOCOUNT ON;

			DECLARE @L01_RULE_MIN NUMERIC(6,2),@L01_RULE_MAX NUMERIC(6,2);
			DECLARE @L02_RULE_MIN NUMERIC(6,2),@L02_RULE_MAX NUMERIC(6,2);
			DECLARE @L03_RULE_MIN NUMERIC(6,2),@L03_RULE_MAX NUMERIC(6,2);
			DECLARE @L04_RULE_MIN NUMERIC(6,2),@L04_RULE_MAX NUMERIC(6,2);
			DECLARE @L10_RULE_COUNT INT,@L10_RULE_MIN NUMERIC(6,2);
			DECLARE @L21_RULE_COUNT INT,@L21_RULE_MIN NUMERIC(6,2);
			DECLARE @L23_RULE_COUNT INT,@L23_RULE_MIN NUMERIC(6,2);
			DECLARE @L31_RULE_COUNT INT,@L31_RULE_MIN NUMERIC(6,2),@L31_RULE_MAX NUMERIC(6,2);
			DECLARE @L32_RULE_COUNT INT,@L32_RULE_MIN NUMERIC(6,2),@L32_RULE_MAX NUMERIC(6,2);
			DECLARE @L33_RULE_COUNT INT,@L33_RULE_MIN NUMERIC(6,2),@L33_RULE_MAX NUMERIC(6,2);
			DECLARE @L34_RULE_COUNT INT,@L34_RULE_MIN NUMERIC(6,2),@L34_RULE_MAX NUMERIC(6,2);

			DECLARE @RULE_NUM VARCHAR(8),@RULE_COUNT INT,@RULE_MIN NUMERIC(6,2),@RULE_MAX NUMERIC(6,2);
			DECLARE CUR_RULE CURSOR FOR SELECT RULE_NUM,RULE_COUNT,RULE_MIN,RULE_MAX FROM STAR_RULE;
			OPEN CUR_RULE;
			FETCH NEXT FROM CUR_RULE INTO @RULE_NUM,@RULE_COUNT,@RULE_MIN,@RULE_MAX;
			WHILE @@FETCH_STATUS = 0 BEGIN
				IF @RULE_NUM='L01' BEGIN
					SET @L01_RULE_MIN=@RULE_MIN;
					SET @L01_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L02' BEGIN
					SET @L02_RULE_MIN=@RULE_MIN;
					SET @L02_RULE_MAX=@RULE_MAX;
				END  ELSE IF @RULE_NUM='L03' BEGIN
					SET @L03_RULE_MIN=@RULE_MIN;
					SET @L03_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L04' BEGIN
					SET @L04_RULE_MIN=@RULE_MIN;
					SET @L04_RULE_MAX=@RULE_MAX;
				END  ELSE IF @RULE_NUM='L10' BEGIN
					SET @L10_RULE_COUNT=@RULE_COUNT;
					SET @L10_RULE_MIN=@RULE_MIN;
				END ELSE IF @RULE_NUM='L21' BEGIN
					SET @L21_RULE_COUNT=@RULE_COUNT;
					SET @L21_RULE_MIN=@RULE_MIN;
				END ELSE IF @RULE_NUM='L23' BEGIN
					SET @L23_RULE_COUNT=@RULE_COUNT;
					SET @L23_RULE_MIN=@RULE_MIN;
				END ELSE IF @RULE_NUM='L31' BEGIN
					SET @L31_RULE_COUNT=@RULE_COUNT;
					SET @L31_RULE_MIN=@RULE_MIN;
					SET @L31_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L32' BEGIN
					SET @L32_RULE_COUNT=@RULE_COUNT;
					SET @L32_RULE_MIN=@RULE_MIN;
					SET @L32_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L33' BEGIN
					SET @L33_RULE_COUNT=@RULE_COUNT;
					SET @L33_RULE_MIN=@RULE_MIN;
					SET @L33_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L34' BEGIN
					SET @L34_RULE_COUNT=@RULE_COUNT;
					SET @L34_RULE_MIN=@RULE_MIN;
					SET @L34_RULE_MAX=@RULE_MAX;
				END

				FETCH NEXT FROM CUR_RULE INTO @RULE_NUM,@RULE_COUNT,@RULE_MIN,@RULE_MAX;
			END
			CLOSE CUR_RULE;
			DEALLOCATE CUR_RULE;

			DECLARE @STAT_VEHICLES VARCHAR(512) = '';
			DECLARE @TODAY DATETIME = GETDATE();
			DECLARE @STAT_DATE DATETIME, @STAT_SPUR INT;
			DECLARE @STAT_COUNT INT = 0, @SCRORE NUMERIC(6,2) = 0.0;
			DECLARE @EXIT_STATION VARCHAR(32), @RECORD_ID BIGINT;
			DECLARE @AXLE_COUNT INT, @VEHICLE_TYPE INT,
					 @NEW_RECORD_DATE DATETIME, @NEW_VEHICLE_NUM VARCHAR(32),
					 @NEW_IS_GREEN CHAR(1), @NEW_AMOUNT INT, @NEW_SPUR_TYPE INT;
			DECLARE @CURR_RECORD_ID BIGINT, @CURR_RECORD_DATE DATETIME,
					 @CURR_EXIT_STATION VARCHAR(32), @CURR_IS_GREEN CHAR(1),
					 @CURR_AMOUNT INT, @CURR_SPUR_TYPE INT,
					 @CURR_NOGRN_ID BIGINT, @CURR_NOGRN_STATION VARCHAR(32),
					 @CURR_NOGRN_DATE DATETIME, @CURR_GRADE NUMERIC(6,2);
			DECLARE CUR_DATA CURSOR FOR
				SELECT I.EXIT_STATION, I.RECORD_ID,I.RECORD_DATE,
						I.VEHICLE_NUM, I.AXLE_COUNT, I.VEHICLE_TYPE,
						I.IS_GREEN, I.AMOUNT, I.SPUR_TYPE
				FROM INSERTED I;
			OPEN CUR_DATA;
			FETCH NEXT FROM CUR_DATA INTO
				@EXIT_STATION, @RECORD_ID,@NEW_RECORD_DATE,
				@NEW_VEHICLE_NUM, @AXLE_COUNT, @VEHICLE_TYPE,
				@NEW_IS_GREEN, @NEW_AMOUNT, @NEW_SPUR_TYPE;
			WHILE @@FETCH_STATUS = 0 BEGIN
				SET @STAT_DATE = CAST(CONVERT(VARCHAR(8),@NEW_RECORD_DATE,120) + '01' AS DATETIME);
				IF @NEW_IS_GREEN='1' SET @STAT_SPUR=0 ELSE SET @STAT_SPUR = @NEW_SPUR_TYPE;
				IF EXISTS(
					SELECT '1' FROM VEHICLE_STATISTICS
					WHERE STAT_DATE=@STAT_DATE AND VEHICLE_NUM=@NEW_VEHICLE_NUM
					  AND STATION_NUM=@EXIT_STATION AND IS_GREEN=@NEW_IS_GREEN
					  AND SPUR_TYPE = @STAT_SPUR) BEGIN
					UPDATE VEHICLE_STATISTICS SET
						CNT = CNT + 1,
						AMT = AMT + @NEW_AMOUNT
					WHERE STAT_DATE=@STAT_DATE AND VEHICLE_NUM=@NEW_VEHICLE_NUM
							  AND STATION_NUM=@EXIT_STATION AND IS_GREEN=@NEW_IS_GREEN
							  AND SPUR_TYPE = @STAT_SPUR
				END ELSE BEGIN
					INSERT INTO VEHICLE_STATISTICS(STAT_DATE,VEHICLE_NUM,STATION_NUM,IS_GREEN,SPUR_TYPE,CNT,AMT)
					VALUES(@STAT_DATE,@NEW_VEHICLE_NUM,@EXIT_STATION,@NEW_IS_GREEN,@STAT_SPUR,1,@NEW_AMOUNT);
				END

				IF @NEW_RECORD_DATE > @TODAY BEGIN
					FETCH NEXT FROM CUR_DATA INTO
						@EXIT_STATION, @RECORD_ID,@NEW_RECORD_DATE,
						@NEW_VEHICLE_NUM, @AXLE_COUNT, @VEHICLE_TYPE,
						@NEW_IS_GREEN, @NEW_AMOUNT, @NEW_SPUR_TYPE;
					CONTINUE;
				END;

				SET @SCRORE = 0;

				SELECT @CURR_GRADE=GRADE, @AXLE_COUNT=AXLE_COUNT,
					   @VEHICLE_TYPE=VEHICLE_TYPE, @CURR_RECORD_ID=G.RECORD_ID,
					   @CURR_EXIT_STATION=G.EXIT_STATION, @CURR_RECORD_DATE=G.RECORD_DATE,
					   @CURR_IS_GREEN=G.IS_GREEN, @CURR_SPUR_TYPE=G.SPUR_TYPE,
					   @CURR_AMOUNT=G.AMOUNT, @CURR_NOGRN_ID=G.NOGRN_ID,
					   @CURR_NOGRN_STATION=G.NOGRN_STATION, @CURR_NOGRN_DATE=G.NOGRN_DATE
				FROM VEHICLE_GRADE G
				WHERE G.VEHICLE_NUM = @NEW_VEHICLE_NUM;
				IF @@ROWCOUNT > 0 BEGIN
					IF @NEW_RECORD_DATE > @CURR_RECORD_DATE AND @NEW_IS_GREEN='1' BEGIN
						SELECT @STAT_COUNT = COUNT('1')
						FROM (SELECT ROW_NUMBER() OVER (ORDER BY R.RECORD_DATE DESC) AS ROWNUM,
									 R.RECORD_DATE,R.EXIT_STATION,R.IS_GREEN,R.SPUR_TYPE,R.AMOUNT
							  FROM PASS_RECORD R
							  WHERE R.VEHICLE_NUM=@NEW_VEHICLE_NUM) tmp
						WHERE ROWNUM <= @L10_RULE_COUNT AND IS_GREEN='0';
						IF @STAT_COUNT = 0 SET @SCRORE = @L10_RULE_MIN;

						UPDATE VEHICLE_GRADE SET
							GRADE = CASE WHEN ISNULL(GRADE,0.00) + @SCRORE > @L03_RULE_MAX THEN @L03_RULE_MAX
										 ELSE ISNULL(GRADE,0.00) + @SCRORE
									END,
							SCORE = CASE WHEN ISNULL(GRADE,0.00) + @SCRORE > @L03_RULE_MAX THEN @L03_RULE_MAX - ISNULL(GRADE,0.00)
										 ELSE @SCRORE
									END,
							AXLE_COUNT = @AXLE_COUNT,
							VEHICLE_TYPE = @VEHICLE_TYPE,
							RECORD_ID = @RECORD_ID,
							EXIT_STATION = @EXIT_STATION,
							RECORD_DATE = @NEW_RECORD_DATE,
							IS_GREEN = @NEW_IS_GREEN,
							SPUR_TYPE = @NEW_SPUR_TYPE,
							AMOUNT = @NEW_AMOUNT,
							TOTAL_GRN_CNT = TOTAL_GRN_CNT + 1,
							TOTAL_GRN_AMT = TOTAL_GRN_AMT + @NEW_AMOUNT
						WHERE VEHICLE_NUM = @NEW_VEHICLE_NUM
					END ELSE IF @NEW_RECORD_DATE > @CURR_RECORD_DATE AND @NEW_IS_GREEN='0' BEGIN
						UPDATE VEHICLE_GRADE SET
							GRADE = GRADE - @L21_RULE_MIN,
							SCORE = (-1) * @L21_RULE_MIN,
							AXLE_COUNT = @AXLE_COUNT,
							VEHICLE_TYPE = @VEHICLE_TYPE,
							RECORD_ID = @RECORD_ID,
							EXIT_STATION = @EXIT_STATION,
							RECORD_DATE = @NEW_RECORD_DATE,
							IS_GREEN = @NEW_IS_GREEN,
							SPUR_TYPE = @NEW_SPUR_TYPE,
							AMOUNT = @NEW_AMOUNT,
							NOGRN_ID = @RECORD_ID,
							NOGRN_STATION = @EXIT_STATION,
							NOGRN_DATE = @NEW_RECORD_DATE,
							NOGRN_SPUR = @NEW_SPUR_TYPE,
							NOGRN_AMOUNT = @NEW_AMOUNT,
							TOTAL_NOGRN_CNT = TOTAL_NOGRN_CNT + 1,
							TOTAL_NOGRN_AMT = TOTAL_NOGRN_AMT + @NEW_AMOUNT
						WHERE VEHICLE_NUM = @NEW_VEHICLE_NUM;
					END ELSE IF @NEW_RECORD_DATE > @CURR_NOGRN_DATE AND @NEW_IS_GREEN='0' BEGIN
						UPDATE VEHICLE_GRADE SET
							GRADE = GRADE - @L21_RULE_MIN,
							SCORE = (-1) * @L21_RULE_MIN,
							NOGRN_ID = @RECORD_ID,
							NOGRN_STATION = @EXIT_STATION,
							NOGRN_DATE = @NEW_RECORD_DATE,
							NOGRN_SPUR = @NEW_SPUR_TYPE,
							NOGRN_AMOUNT = @NEW_AMOUNT,
							TOTAL_NOGRN_CNT = TOTAL_NOGRN_CNT + 1,
							TOTAL_NOGRN_AMT = TOTAL_NOGRN_AMT + @NEW_AMOUNT
						WHERE VEHICLE_NUM = @NEW_VEHICLE_NUM;
					END ELSE IF @NEW_IS_GREEN='0' BEGIN
						UPDATE VEHICLE_GRADE SET
							GRADE = GRADE - @L21_RULE_MIN,
							TOTAL_NOGRN_CNT = TOTAL_NOGRN_CNT + 1,
							TOTAL_NOGRN_AMT = TOTAL_NOGRN_AMT + @NEW_AMOUNT
						WHERE VEHICLE_NUM = @NEW_VEHICLE_NUM;
					END ELSE BEGIN
						SELECT @STAT_COUNT = COUNT('1')
						FROM (SELECT ROW_NUMBER() OVER (ORDER BY R.RECORD_DATE DESC) AS ROWNUM,
									 R.RECORD_DATE,R.EXIT_STATION,R.IS_GREEN,R.SPUR_TYPE,R.AMOUNT
							  FROM PASS_RECORD R
							  WHERE R.VEHICLE_NUM=@NEW_VEHICLE_NUM) tmp
						WHERE ROWNUM <= @L10_RULE_COUNT AND IS_GREEN='0';
						IF @STAT_COUNT = 0 SET @SCRORE = @L10_RULE_MIN;

						UPDATE VEHICLE_GRADE SET
							GRADE=CASE WHEN ISNULL(GRADE,0.00) + @SCRORE > @L03_RULE_MAX THEN @L03_RULE_MAX
									   ELSE ISNULL(GRADE,0.00) + @SCRORE
								  END,
							SCORE = CASE WHEN ISNULL(GRADE,0.00) + @SCRORE > @L03_RULE_MAX THEN @L03_RULE_MAX - ISNULL(GRADE,0.00)
										 ELSE @SCRORE
									END,
							TOTAL_GRN_CNT = TOTAL_GRN_CNT + 1,
							TOTAL_GRN_AMT = TOTAL_GRN_AMT + @NEW_AMOUNT
						WHERE VEHICLE_NUM = @NEW_VEHICLE_NUM;
					END
				END ELSE IF @NEW_IS_GREEN = '1' BEGIN
					IF @L10_RULE_COUNT = 1 SET @SCRORE = @L10_RULE_MIN;
					INSERT INTO VEHICLE_GRADE(VEHICLE_NUM,GRADE,SCORE,AXLE_COUNT,VEHICLE_TYPE,RECORD_ID,EXIT_STATION,
						RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT,TOTAL_GRN_CNT,TOTAL_GRN_AMT)
					VALUES(@NEW_VEHICLE_NUM, @SCRORE, @SCRORE, @AXLE_COUNT, @VEHICLE_TYPE, @RECORD_ID, @EXIT_STATION,
						@NEW_RECORD_DATE, @NEW_IS_GREEN, @NEW_SPUR_TYPE, @NEW_AMOUNT, 1, @NEW_AMOUNT);
				END ELSE BEGIN
					INSERT INTO VEHICLE_GRADE(VEHICLE_NUM,GRADE,SCORE,AXLE_COUNT,VEHICLE_TYPE,
			                RECORD_ID,EXIT_STATION,RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT,
			                NOGRN_ID,NOGRN_STATION,NOGRN_DATE,NOGRN_SPUR,NOGRN_AMOUNT,TOTAL_NOGRN_CNT,TOTAL_NOGRN_AMT)
					VALUES(@NEW_VEHICLE_NUM,@L04_RULE_MIN - @L21_RULE_MIN,@L04_RULE_MIN - @L21_RULE_MIN,@AXLE_COUNT,@VEHICLE_TYPE,
			                @RECORD_ID,@EXIT_STATION,@NEW_RECORD_DATE,@NEW_IS_GREEN,@NEW_SPUR_TYPE, @NEW_AMOUNT,
				            @RECORD_ID, @EXIT_STATION, @NEW_RECORD_DATE,@NEW_SPUR_TYPE, @NEW_AMOUNT,1,@NEW_AMOUNT);
				END

				FETCH NEXT FROM CUR_DATA INTO
					@EXIT_STATION, @RECORD_ID,@NEW_RECORD_DATE,
					@NEW_VEHICLE_NUM, @AXLE_COUNT, @VEHICLE_TYPE,
					@NEW_IS_GREEN, @NEW_AMOUNT, @NEW_SPUR_TYPE;
			END
			CLOSE CUR_DATA;
			DEALLOCATE CUR_DATA;
		END
		]]>
	</update>

	<update id="createUpdateTrigger"> <![CDATA[
		CREATE TRIGGER TRG_U_PASS_RECORD_${stationNum} ON  PASS_RECORD_${stationNum} AFTER UPDATE AS
		BEGIN
			SET NOCOUNT ON;

			DECLARE @L01_RULE_MIN NUMERIC(6,2),@L01_RULE_MAX NUMERIC(6,2);
			DECLARE @L02_RULE_MIN NUMERIC(6,2),@L02_RULE_MAX NUMERIC(6,2);
			DECLARE @L03_RULE_MIN NUMERIC(6,2),@L03_RULE_MAX NUMERIC(6,2);
			DECLARE @L04_RULE_MIN NUMERIC(6,2),@L04_RULE_MAX NUMERIC(6,2);
			DECLARE @L10_RULE_COUNT INT,@L10_RULE_MIN NUMERIC(6,2);
			DECLARE @L21_RULE_COUNT INT,@L21_RULE_MIN NUMERIC(6,2);
			DECLARE @L23_RULE_COUNT INT,@L23_RULE_MIN NUMERIC(6,2);
			DECLARE @L31_RULE_COUNT INT,@L31_RULE_MIN NUMERIC(6,2),@L31_RULE_MAX NUMERIC(6,2);
			DECLARE @L32_RULE_COUNT INT,@L32_RULE_MIN NUMERIC(6,2),@L32_RULE_MAX NUMERIC(6,2);
			DECLARE @L33_RULE_COUNT INT,@L33_RULE_MIN NUMERIC(6,2),@L33_RULE_MAX NUMERIC(6,2);
			DECLARE @L34_RULE_COUNT INT,@L34_RULE_MIN NUMERIC(6,2),@L34_RULE_MAX NUMERIC(6,2);

			DECLARE @RULE_NUM VARCHAR(8),@RULE_COUNT INT,@RULE_MIN NUMERIC(6,2),@RULE_MAX NUMERIC(6,2);
			DECLARE CUR_RULE CURSOR FOR SELECT RULE_NUM,RULE_COUNT,RULE_MIN,RULE_MAX FROM STAR_RULE;
			OPEN CUR_RULE;
			FETCH NEXT FROM CUR_RULE INTO @RULE_NUM,@RULE_COUNT,@RULE_MIN,@RULE_MAX;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @RULE_NUM='L01'
				BEGIN
					SET @L01_RULE_MIN=@RULE_MIN;
					SET @L01_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L02'
				BEGIN
					SET @L02_RULE_MIN=@RULE_MIN;
					SET @L02_RULE_MAX=@RULE_MAX;
				END  ELSE IF @RULE_NUM='L03'
				BEGIN
					SET @L03_RULE_MIN=@RULE_MIN;
					SET @L03_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L04'
				BEGIN
					SET @L04_RULE_MIN=@RULE_MIN;
					SET @L04_RULE_MAX=@RULE_MAX;
				END  ELSE IF @RULE_NUM='L10'
				BEGIN
					SET @L10_RULE_COUNT=@RULE_COUNT;
					SET @L10_RULE_MIN=@RULE_MIN;
				END ELSE IF @RULE_NUM='L21'
				BEGIN
					SET @L21_RULE_COUNT=@RULE_COUNT;
					SET @L21_RULE_MIN=@RULE_MIN;
				END ELSE IF @RULE_NUM='L23'
				BEGIN
					SET @L23_RULE_COUNT=@RULE_COUNT;
					SET @L23_RULE_MIN=@RULE_MIN;
				END ELSE IF @RULE_NUM='L31'
				BEGIN
					SET @L31_RULE_COUNT=@RULE_COUNT;
					SET @L31_RULE_MIN=@RULE_MIN;
					SET @L31_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L32'
				BEGIN
					SET @L32_RULE_COUNT=@RULE_COUNT;
					SET @L32_RULE_MIN=@RULE_MIN;
					SET @L32_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L33'
				BEGIN
					SET @L33_RULE_COUNT=@RULE_COUNT;
					SET @L33_RULE_MIN=@RULE_MIN;
					SET @L33_RULE_MAX=@RULE_MAX;
				END ELSE IF @RULE_NUM='L34'
				BEGIN
					SET @L34_RULE_COUNT=@RULE_COUNT;
					SET @L34_RULE_MIN=@RULE_MIN;
					SET @L34_RULE_MAX=@RULE_MAX;
				END

				FETCH NEXT FROM CUR_RULE INTO @RULE_NUM,@RULE_COUNT,@RULE_MIN,@RULE_MAX;
			END
			CLOSE CUR_RULE;
			DEALLOCATE CUR_RULE;

			DECLARE @STAT_DATE DATETIME, @STAT_SPUR INT;
			DECLARE @EXIT_STATION VARCHAR(32), @RECORD_ID BIGINT;
			DECLARE @OLD_RECORD_DATE DATETIME, @OLD_VEHICLE_NUM VARCHAR(32),
					@OLD_IS_GREEN CHAR(1), @OLD_AMOUNT INT, @OLD_SPUR_TYPE INT;
			DECLARE @AXLE_COUNT INT, @VEHICLE_TYPE INT, @STAT_COUNT INT,@SCRORE NUMERIC(6,2),
					@NEW_RECORD_DATE DATETIME, @NEW_VEHICLE_NUM VARCHAR(32),
					@NEW_IS_GREEN CHAR(1), @NEW_AMOUNT INT, @NEW_SPUR_TYPE INT;
			DECLARE @CURR_RECORD_ID BIGINT, @CURR_RECORD_DATE DATETIME,
					@CURR_EXIT_STATION VARCHAR(32), @CURR_IS_GREEN CHAR(1),
					@CURR_AMOUNT INT, @CURR_SPUR_TYPE INT,
					@CURR_NOGRN_ID BIGINT, @CURR_NOGRN_STATION VARCHAR(32),
					@CURR_NOGRN_DATE DATETIME, @CURR_GRADE NUMERIC(6,2);
			DECLARE CUR_DATA CURSOR FOR
				SELECT I.EXIT_STATION, I.RECORD_ID, I.AXLE_COUNT, I.VEHICLE_TYPE,
					   D.RECORD_DATE, D.VEHICLE_NUM, D.IS_GREEN, D.AMOUNT, D.SPUR_TYPE,
					   I.RECORD_DATE, I.VEHICLE_NUM, I.IS_GREEN, I.AMOUNT, I.SPUR_TYPE
				FROM INSERTED I, DELETED D
				WHERE I.RECORD_ID = D.RECORD_ID;
			OPEN CUR_DATA;
			FETCH NEXT FROM CUR_DATA INTO
				@EXIT_STATION, @RECORD_ID, @AXLE_COUNT, @VEHICLE_TYPE,
				@OLD_RECORD_DATE, @OLD_VEHICLE_NUM, @OLD_IS_GREEN, @OLD_AMOUNT, @OLD_SPUR_TYPE,
				@NEW_RECORD_DATE, @NEW_VEHICLE_NUM, @NEW_IS_GREEN, @NEW_AMOUNT, @NEW_SPUR_TYPE;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF @OLD_RECORD_DATE = @NEW_RECORD_DATE AND @OLD_VEHICLE_NUM = @NEW_VEHICLE_NUM AND @OLD_IS_GREEN = @NEW_IS_GREEN
					 AND @OLD_AMOUNT = @NEW_AMOUNT AND @OLD_SPUR_TYPE = @NEW_SPUR_TYPE
				BEGIN
					FETCH NEXT FROM CUR_DATA INTO
						@EXIT_STATION, @RECORD_ID, @AXLE_COUNT, @VEHICLE_TYPE,
						@OLD_RECORD_DATE, @OLD_VEHICLE_NUM, @OLD_IS_GREEN, @OLD_AMOUNT, @OLD_SPUR_TYPE,
						@NEW_RECORD_DATE, @NEW_VEHICLE_NUM, @NEW_IS_GREEN, @NEW_AMOUNT, @NEW_SPUR_TYPE;
					CONTINUE;
				END
				--修改旧数据统计
				SET @STAT_DATE = CAST(CONVERT(VARCHAR(8),@OLD_RECORD_DATE,120) + '01' AS DATETIME);
				IF @OLD_IS_GREEN='1' SET @STAT_SPUR=0 ELSE SET @STAT_SPUR = @OLD_SPUR_TYPE;
				IF EXISTS(
					SELECT '1' FROM VEHICLE_STATISTICS
					WHERE STAT_DATE=@STAT_DATE AND VEHICLE_NUM=@OLD_VEHICLE_NUM
					  AND STATION_NUM=@EXIT_STATION AND IS_GREEN=@OLD_IS_GREEN
					  AND SPUR_TYPE = @STAT_SPUR)
				BEGIN
					UPDATE VEHICLE_STATISTICS SET
						CNT = CNT - 1,
						AMT = AMT - @OLD_AMOUNT
					WHERE STAT_DATE=@STAT_DATE AND VEHICLE_NUM=@OLD_VEHICLE_NUM
					  AND STATION_NUM=@EXIT_STATION AND IS_GREEN=@OLD_IS_GREEN
					  AND SPUR_TYPE=@STAT_SPUR
				END
				--修改新数据统计
				SET @STAT_DATE = CAST(CONVERT(VARCHAR(8),@NEW_RECORD_DATE,120) + '01' AS DATETIME);
				IF @NEW_IS_GREEN='1' SET @STAT_SPUR=0 ELSE SET @STAT_SPUR = @NEW_SPUR_TYPE;
				IF EXISTS(
					SELECT '1' FROM VEHICLE_STATISTICS
					WHERE STAT_DATE=@STAT_DATE AND VEHICLE_NUM=@NEW_VEHICLE_NUM
					  AND STATION_NUM=@EXIT_STATION AND IS_GREEN=@NEW_IS_GREEN
					  AND SPUR_TYPE = @STAT_SPUR)
				BEGIN
					UPDATE VEHICLE_STATISTICS SET
						CNT = CNT + 1,
						AMT = AMT + @NEW_AMOUNT
					WHERE STAT_DATE=@STAT_DATE AND VEHICLE_NUM=@NEW_VEHICLE_NUM
					  AND STATION_NUM=@EXIT_STATION AND IS_GREEN=@NEW_IS_GREEN
					  AND SPUR_TYPE = @STAT_SPUR
				END ELSE BEGIN
					INSERT INTO VEHICLE_STATISTICS(STAT_DATE,VEHICLE_NUM,STATION_NUM,IS_GREEN,SPUR_TYPE,CNT,AMT)
					VALUES(@STAT_DATE,@NEW_VEHICLE_NUM,@EXIT_STATION,@NEW_IS_GREEN,@STAT_SPUR,1,@NEW_AMOUNT);
				END

				--修改车辆评分信息
				SET @SCRORE = 0;
				DECLARE @ROWCNT INT = 0;
				SELECT @CURR_GRADE=GRADE, @CURR_RECORD_ID=G.RECORD_ID,
					   @CURR_EXIT_STATION=G.EXIT_STATION, @CURR_RECORD_DATE=G.RECORD_DATE,
					   @CURR_IS_GREEN=G.IS_GREEN, @CURR_SPUR_TYPE=G.SPUR_TYPE,
					   @CURR_AMOUNT=G.AMOUNT, @CURR_NOGRN_ID=G.NOGRN_ID,
					   @CURR_NOGRN_STATION=G.NOGRN_STATION, @CURR_NOGRN_DATE=G.NOGRN_DATE
					FROM VEHICLE_GRADE G
					WHERE G.VEHICLE_NUM = @OLD_VEHICLE_NUM;
				SET @ROWCNT = @@ROWCOUNT;
				IF @OLD_VEHICLE_NUM <> @NEW_VEHICLE_NUM BEGIN
					IF @ROWCNT > 0 BEGIN
						--修改旧数据
						IF @OLD_IS_GREEN = '0' SET @SCRORE = @L21_RULE_MIN;
						UPDATE VEHICLE_GRADE SET
							GRADE = GRADE + @SCRORE,
							SCORE = @SCRORE,
							AXLE_COUNT = TMP1.AXLE_COUNT,
							VEHICLE_TYPE = TMP1.VEHICLE_TYPE,
							RECORD_ID = TMP1.RECORD_ID,
							EXIT_STATION = TMP1.EXIT_STATION,
							RECORD_DATE = TMP1.RECORD_DATE,
							IS_GREEN = TMP1.IS_GREEN,
							SPUR_TYPE = TMP1.SPUR_TYPE,
							AMOUNT = TMP1.AMOUNT,
							NOGRN_ID = TMP2.RECORD_ID,
							NOGRN_STATION = TMP2.EXIT_STATION,
							NOGRN_DATE = TMP2.RECORD_DATE,
							NOGRN_SPUR = TMP2.SPUR_TYPE,
							NOGRN_AMOUNT = TMP2.AMOUNT,
							TOTAL_GRN_CNT = CASE WHEN @OLD_IS_GREEN='1' THEN TOTAL_GRN_CNT - 1 ELSE TOTAL_GRN_CNT END,
							TOTAL_GRN_AMT = CASE WHEN @OLD_IS_GREEN='1' THEN TOTAL_GRN_AMT - @OLD_AMOUNT ELSE TOTAL_GRN_AMT END,
							TOTAL_NOGRN_CNT = CASE WHEN @OLD_IS_GREEN='0' THEN TOTAL_NOGRN_CNT - 1 ELSE TOTAL_NOGRN_CNT END,
							TOTAL_NOGRN_AMT = CASE WHEN @OLD_IS_GREEN='0' THEN TOTAL_NOGRN_AMT - @OLD_AMOUNT ELSE TOTAL_NOGRN_AMT END
						FROM VEHICLE_GRADE V
							LEFT JOIN (
								SELECT TOP 1
									VEHICLE_NUM,AXLE_COUNT,VEHICLE_TYPE,RECORD_ID,EXIT_STATION,RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT
								FROM PASS_RECORD
								WHERE RECORD_DATE = (SELECT MAX(RECORD_DATE) FROM PASS_RECORD WHERE VEHICLE_NUM=@OLD_VEHICLE_NUM)
								  AND VEHICLE_NUM=@OLD_VEHICLE_NUM
							) TMP1 ON TMP1.VEHICLE_NUM = V.VEHICLE_NUM
							LEFT JOIN (
								SELECT TOP 1
									VEHICLE_NUM,RECORD_ID,EXIT_STATION,RECORD_DATE,SPUR_TYPE,AMOUNT
								FROM PASS_RECORD
								WHERE RECORD_DATE = (SELECT MAX(RECORD_DATE) FROM PASS_RECORD WHERE VEHICLE_NUM=@OLD_VEHICLE_NUM AND IS_GREEN='0')
								  AND VEHICLE_NUM=@OLD_VEHICLE_NUM AND IS_GREEN='0'
							) TMP2 ON TMP2.VEHICLE_NUM = V.VEHICLE_NUM
						WHERE V.VEHICLE_NUM = @OLD_VEHICLE_NUM
					END

					--修改新数据
					SELECT @CURR_GRADE=GRADE, @CURR_RECORD_ID=G.RECORD_ID,
						   @CURR_EXIT_STATION=G.EXIT_STATION, @CURR_RECORD_DATE=G.RECORD_DATE,
						   @CURR_IS_GREEN=G.IS_GREEN, @CURR_SPUR_TYPE=G.SPUR_TYPE,
						   @CURR_AMOUNT=G.AMOUNT, @CURR_NOGRN_ID=G.NOGRN_ID,
						   @CURR_NOGRN_STATION=G.NOGRN_STATION, @CURR_NOGRN_DATE=G.NOGRN_DATE
					FROM VEHICLE_GRADE G
					WHERE G.VEHICLE_NUM = @NEW_VEHICLE_NUM;
					IF @@ROWCOUNT > 0 BEGIN
						IF @NEW_IS_GREEN = '0' SET @SCRORE = 0.0 - @L21_RULE_MIN
						ELSE BEGIN
							SELECT @STAT_COUNT = COUNT('1')
							FROM (SELECT ROW_NUMBER() OVER (ORDER BY R.RECORD_DATE DESC) AS ROWNUM,
										 R.RECORD_DATE,R.EXIT_STATION,R.IS_GREEN,R.SPUR_TYPE,R.AMOUNT
								  FROM PASS_RECORD R
								  WHERE R.VEHICLE_NUM=@NEW_VEHICLE_NUM) tmp
							WHERE ROWNUM <= @L10_RULE_COUNT AND IS_GREEN='0';
							IF @STAT_COUNT = 0 SET @SCRORE = @L10_RULE_MIN;
						END

						UPDATE VEHICLE_GRADE SET
							GRADE = GRADE + @SCRORE,
							SCORE = @SCRORE,
							AXLE_COUNT = TMP1.AXLE_COUNT,
							VEHICLE_TYPE = TMP1.VEHICLE_TYPE,
							RECORD_ID = TMP1.RECORD_ID,
							EXIT_STATION = TMP1.EXIT_STATION,
							RECORD_DATE = TMP1.RECORD_DATE,
							IS_GREEN = TMP1.IS_GREEN,
							SPUR_TYPE = TMP1.SPUR_TYPE,
							AMOUNT = TMP1.AMOUNT,
							NOGRN_ID = TMP2.RECORD_ID,
							NOGRN_STATION = TMP2.EXIT_STATION,
							NOGRN_DATE = TMP2.RECORD_DATE,
							NOGRN_SPUR = TMP2.SPUR_TYPE,
							NOGRN_AMOUNT = TMP2.AMOUNT,
							TOTAL_GRN_CNT = CASE WHEN @NEW_IS_GREEN='1' THEN TOTAL_GRN_CNT - 1 ELSE TOTAL_GRN_CNT END,
							TOTAL_GRN_AMT = CASE WHEN @NEW_IS_GREEN='1' THEN TOTAL_GRN_AMT - @NEW_AMOUNT ELSE TOTAL_GRN_AMT END,
							TOTAL_NOGRN_CNT = CASE WHEN @NEW_IS_GREEN='0' THEN TOTAL_NOGRN_CNT - 1 ELSE TOTAL_NOGRN_CNT END,
							TOTAL_NOGRN_AMT = CASE WHEN @NEW_IS_GREEN='0' THEN TOTAL_NOGRN_AMT - @NEW_AMOUNT ELSE TOTAL_NOGRN_AMT END
						FROM VEHICLE_GRADE V
							LEFT JOIN (
								SELECT TOP 1
									VEHICLE_NUM,AXLE_COUNT,VEHICLE_TYPE,RECORD_ID,EXIT_STATION,RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT
								FROM PASS_RECORD
								WHERE RECORD_DATE = (SELECT MAX(RECORD_DATE) FROM PASS_RECORD WHERE VEHICLE_NUM=@NEW_VEHICLE_NUM)
								  AND VEHICLE_NUM=@NEW_VEHICLE_NUM
							) TMP1 ON TMP1.VEHICLE_NUM = V.VEHICLE_NUM
							LEFT JOIN (
								SELECT TOP 1
									VEHICLE_NUM,RECORD_ID,EXIT_STATION,RECORD_DATE,SPUR_TYPE,AMOUNT
								FROM PASS_RECORD
								WHERE RECORD_DATE = (SELECT MAX(RECORD_DATE) FROM PASS_RECORD WHERE VEHICLE_NUM=@NEW_VEHICLE_NUM AND IS_GREEN='0')
								  AND VEHICLE_NUM=@NEW_VEHICLE_NUM AND IS_GREEN='0'
							) TMP2 ON TMP2.VEHICLE_NUM = V.VEHICLE_NUM
						WHERE V.VEHICLE_NUM = @NEW_VEHICLE_NUM
					END ELSE IF @NEW_IS_GREEN = '1' BEGIN
						IF @L10_RULE_COUNT = 1 SET @SCRORE = @L10_RULE_MIN;
						INSERT INTO VEHICLE_GRADE(VEHICLE_NUM,GRADE,SCORE,AXLE_COUNT,VEHICLE_TYPE,RECORD_ID,EXIT_STATION,
							RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT,TOTAL_GRN_CNT,TOTAL_GRN_AMT)
						VALUES(@NEW_VEHICLE_NUM, @SCRORE, @SCRORE, @AXLE_COUNT, @VEHICLE_TYPE, @RECORD_ID, @EXIT_STATION,
							@NEW_RECORD_DATE, @NEW_IS_GREEN, @NEW_SPUR_TYPE, @NEW_AMOUNT, 1, @NEW_AMOUNT);
					END ELSE BEGIN
						INSERT INTO VEHICLE_GRADE(VEHICLE_NUM,GRADE,SCORE,AXLE_COUNT,VEHICLE_TYPE,
			    			RECORD_ID,EXIT_STATION,RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT,
			    			NOGRN_ID,NOGRN_STATION,NOGRN_DATE,NOGRN_SPUR,NOGRN_AMOUNT,TOTAL_NOGRN_CNT,TOTAL_NOGRN_AMT)
						VALUES(@NEW_VEHICLE_NUM,@L04_RULE_MIN - @L21_RULE_MIN,@L04_RULE_MIN - @L21_RULE_MIN,@AXLE_COUNT,@VEHICLE_TYPE,
			       			@RECORD_ID,@EXIT_STATION,@NEW_RECORD_DATE,@NEW_IS_GREEN,@NEW_SPUR_TYPE, @NEW_AMOUNT,
				   			@RECORD_ID, @EXIT_STATION, @NEW_RECORD_DATE,@NEW_SPUR_TYPE, @NEW_AMOUNT,1,@NEW_AMOUNT);
					END
				END ELSE IF @ROWCNT > 0 BEGIN
					IF @OLD_IS_GREEN='1' AND @NEW_IS_GREEN = '0' SET @SCRORE = 0.0 - @L21_RULE_MIN
					ELSE IF @OLD_IS_GREEN='0' AND @NEW_IS_GREEN = '1' BEGIN
						SELECT @STAT_COUNT = COUNT('1')
						FROM (SELECT ROW_NUMBER() OVER (ORDER BY R.RECORD_DATE DESC) AS ROWNUM,
									 R.RECORD_DATE,R.EXIT_STATION,R.IS_GREEN,R.SPUR_TYPE,R.AMOUNT
							  FROM PASS_RECORD R
							  WHERE R.VEHICLE_NUM=@NEW_VEHICLE_NUM) tmp
						WHERE ROWNUM <= @L10_RULE_COUNT AND IS_GREEN='0';
						IF @STAT_COUNT = 0 SET @SCRORE = @L10_RULE_MIN;
					END

					UPDATE VEHICLE_GRADE SET
						GRADE = GRADE + @SCRORE,
						SCORE = @SCRORE,
						AXLE_COUNT = TMP1.AXLE_COUNT,
						VEHICLE_TYPE = TMP1.VEHICLE_TYPE,
						RECORD_ID = TMP1.RECORD_ID,
						EXIT_STATION = TMP1.EXIT_STATION,
						RECORD_DATE = TMP1.RECORD_DATE,
						IS_GREEN = TMP1.IS_GREEN,
						SPUR_TYPE = TMP1.SPUR_TYPE,
						AMOUNT = TMP1.AMOUNT,
						NOGRN_ID = TMP2.RECORD_ID,
						NOGRN_STATION = TMP2.EXIT_STATION,
						NOGRN_DATE = TMP2.RECORD_DATE,
						NOGRN_SPUR = TMP2.SPUR_TYPE,
						NOGRN_AMOUNT = TMP2.AMOUNT,
						TOTAL_GRN_CNT = CASE WHEN @NEW_IS_GREEN='1'
											 THEN CASE WHEN @OLD_IS_GREEN='1' THEN TOTAL_GRN_CNT ELSE TOTAL_GRN_CNT + 1 END
											 ELSE CASE WHEN @OLD_IS_GREEN='0' THEN TOTAL_GRN_CNT ELSE TOTAL_GRN_CNT - 1 END
										END,
						TOTAL_GRN_AMT = CASE WHEN @NEW_IS_GREEN='1'
											 THEN CASE WHEN @OLD_IS_GREEN='1' THEN TOTAL_GRN_AMT ELSE TOTAL_GRN_AMT + @NEW_AMOUNT END
											 ELSE CASE WHEN @OLD_IS_GREEN='0' THEN TOTAL_GRN_AMT ELSE TOTAL_GRN_AMT - @OLD_AMOUNT END
										END,
						TOTAL_NOGRN_CNT = CASE WHEN @NEW_IS_GREEN='0'
											 THEN CASE WHEN @OLD_IS_GREEN='0' THEN TOTAL_NOGRN_CNT ELSE TOTAL_NOGRN_CNT + 1 END
											 ELSE CASE WHEN @OLD_IS_GREEN='1' THEN TOTAL_NOGRN_CNT ELSE TOTAL_NOGRN_CNT - 1 END
										  END,
						TOTAL_NOGRN_AMT = CASE WHEN @NEW_IS_GREEN='0'
											 THEN CASE WHEN @OLD_IS_GREEN='0' THEN TOTAL_NOGRN_AMT ELSE TOTAL_NOGRN_AMT + @NEW_AMOUNT END
											 ELSE CASE WHEN @OLD_IS_GREEN='1' THEN TOTAL_NOGRN_AMT ELSE TOTAL_NOGRN_AMT - @OLD_AMOUNT END
										  END
					FROM VEHICLE_GRADE V
						LEFT JOIN (
							SELECT TOP 1
								VEHICLE_NUM,AXLE_COUNT,VEHICLE_TYPE,RECORD_ID,EXIT_STATION,RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT
							FROM PASS_RECORD
							WHERE RECORD_DATE = (SELECT MAX(RECORD_DATE) FROM PASS_RECORD WHERE VEHICLE_NUM=@NEW_VEHICLE_NUM)
							  AND VEHICLE_NUM=@NEW_VEHICLE_NUM
						) TMP1 ON TMP1.VEHICLE_NUM = V.VEHICLE_NUM
						LEFT JOIN (
							SELECT TOP 1
								VEHICLE_NUM,RECORD_ID,EXIT_STATION,RECORD_DATE,SPUR_TYPE,AMOUNT
							FROM PASS_RECORD
							WHERE RECORD_DATE = (SELECT MAX(RECORD_DATE) FROM PASS_RECORD WHERE VEHICLE_NUM=@NEW_VEHICLE_NUM AND IS_GREEN='0')
							  AND VEHICLE_NUM=@NEW_VEHICLE_NUM AND IS_GREEN='0'
						) TMP2 ON TMP2.VEHICLE_NUM = V.VEHICLE_NUM
					WHERE V.VEHICLE_NUM = @NEW_VEHICLE_NUM
				END ELSE IF @NEW_IS_GREEN = '1' BEGIN
					IF @L10_RULE_COUNT = 1 SET @SCRORE = @L10_RULE_MIN;
					INSERT INTO VEHICLE_GRADE(VEHICLE_NUM,GRADE,SCORE,AXLE_COUNT,VEHICLE_TYPE,RECORD_ID,EXIT_STATION,
						RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT,TOTAL_GRN_CNT,TOTAL_GRN_AMT)
					VALUES(@NEW_VEHICLE_NUM, @SCRORE, @SCRORE, @AXLE_COUNT, @VEHICLE_TYPE, @RECORD_ID, @EXIT_STATION,
						@NEW_RECORD_DATE, @NEW_IS_GREEN, @NEW_SPUR_TYPE, @NEW_AMOUNT, 1, @NEW_AMOUNT);
				END ELSE BEGIN
					INSERT INTO VEHICLE_GRADE(VEHICLE_NUM,GRADE,SCORE,AXLE_COUNT,VEHICLE_TYPE,
			            RECORD_ID,EXIT_STATION,RECORD_DATE,IS_GREEN,SPUR_TYPE,AMOUNT,
			            NOGRN_ID,NOGRN_STATION,NOGRN_DATE,NOGRN_SPUR,NOGRN_AMOUNT,TOTAL_NOGRN_CNT,TOTAL_NOGRN_AMT)
			        VALUES(@NEW_VEHICLE_NUM,@L04_RULE_MIN - @L21_RULE_MIN,@L04_RULE_MIN - @L21_RULE_MIN,@AXLE_COUNT,@VEHICLE_TYPE,
			            @RECORD_ID,@EXIT_STATION,@NEW_RECORD_DATE,@NEW_IS_GREEN,@NEW_SPUR_TYPE, @NEW_AMOUNT,
				        @RECORD_ID, @EXIT_STATION, @NEW_RECORD_DATE,@NEW_SPUR_TYPE, @NEW_AMOUNT,1,@NEW_AMOUNT);
				END

				FETCH NEXT FROM CUR_DATA INTO
					@EXIT_STATION, @RECORD_ID, @AXLE_COUNT, @VEHICLE_TYPE,
					@OLD_RECORD_DATE, @OLD_VEHICLE_NUM, @OLD_IS_GREEN, @OLD_AMOUNT, @OLD_SPUR_TYPE,
					@NEW_RECORD_DATE, @NEW_VEHICLE_NUM, @NEW_IS_GREEN, @NEW_AMOUNT, @NEW_SPUR_TYPE;
			END
			CLOSE CUR_DATA;
			DEALLOCATE CUR_DATA;
		END
	]]>
	</update>
	<select id="querySyncState" resultType="com.kylin.modules.system.entity.Mobile">
		select * from MOBILE where MOBILE_NUM = #{mobileNum} and STATION_NUM = #{stationNum}
	</select>
	<update id="updateSyncState" parameterType="java.util.Map">
		UPDATE mobile
			<trim prefix="set" suffixOverrides=",">
				<if test="stationSync !=null and stationSync != '' ">
					STATION_SYNC = '1',
				</if>
				<if test="usersSync !=null and usersSync != '' ">
					USERS_SYNC = '1',
				</if>
				<if test="goodsSync !=null and goodsSync != '' ">
					GOODS_SYNC = '1',
				</if>
				<if test="catalogSync !=null and catalogSync != '' ">
					CATALOG_SYNC = '1',
				</if>
			</trim>
		WHERE MOBILE_NUM = #{mobileNum} AND STATION_NUM = #{deptNum}
	</update>
	<select id="queryVersion" resultType="com.kylin.modules.system.entity.Mobile">
		select m.*,v.remark from MOBILE m left join MOBILE_VERSION v on v.VERSION_NO = m.VERSION_NO
			where MOBILE_NUM = #{mobileNum} and STATION_NUM = #{stationNum}
</select>
	<select id="getAppRoute" resultType="java.lang.String">
		select file_path,remark from mobile_version where version_no = #{versionNo} AND  dept_num = #{deptNum}
	</select>
</mapper>